#
# NOTE: these globals are shared between the POIs and landuse. if you make an
# update here, please remember to also change it there.
#
global:
  - &output_properties
    name: {col: name}
    source: {col: source}
    min_zoom: {col: min_zoom}
    area:
      call:
        func: util.safe_int
        args: [ { col: area } ]
    source: {col: source}
    protect_class: {col: protect_class}
    operator: {col: operator}
    religion: {col: religion}
    sport: {col: sport}
    ref: {col: ref}
    attraction: {col: attraction}
    zoo: {col: zoo}
    exit_to: {col: exit_to}
  - &transit_properties
    mz_transit_score: {col: mz_transit_score}
    mz_transit_root_relation_id: {col: mz_transit_root_relation_id}
    train_routes: {col: train_routes}
    subway_routes: {col: subway_routes}
    light_rail_routes: {col: light_rail_routes}
    tram_routes: {col: tram_routes}
  - &health_facility_type_kind_detail
    kind_detail: {col: 'health_facility:type'}

  - &tier1_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 3,  300000000 ]
        - [ 4,  300000000 ]
        - [ 5,  150000000 ]
        - [ 6,  150000000 ]
        - [ 7,  100000000 ]
        - [ 8,   10000000 ]
        - [ 9,    5000000 ]
        - [ 10,   1000000 ]
        - [ 11,    500000 ]
        - [ 12,    500000 ]
        - [ 13,    100000 ]
        - [ 14,     50000 ]
        - [ 15,      2000 ]
      default: 16
  - &tier2_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 4, 1000000000 ]
        - [ 5, 1000000000 ]
        - [ 6,  150000000 ]
        - [ 7,  100000000 ]
        - [ 8,   10000000 ]
        - [ 9,    5000000 ]
        - [ 10,   1000000 ]
        - [ 11,    500000 ]
        - [ 12,    250000 ]
        - [ 13,    100000 ]
        - [ 14,     50000 ]
        - [ 15,      2000 ]
      default: 16
  - &tier3_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 8,  10000000 ]
        - [ 9,   5000000 ]
        - [ 10,  1000000 ]
        - [ 11,   500000 ]
        - [ 12,   500000 ]
        - [ 13,   100000 ]
        - [ 14,    50000 ]
        - [ 15,     2000 ]
      default: 16
  - &tier4_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 10, 1000000 ]
        - [ 11,  500000 ]
        - [ 12,  500000 ]
        - [ 13,  100000 ]
        - [ 14,   50000 ]
        - [ 15,    2000 ]
      default: 16
  - &tier5_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 10, 1000000 ]
        - [ 11,  400000 ]
        - [ 12,  200000 ]
        - [ 13,   50000 ]
        - [ 14,   20000 ]
        - [ 15,    2000 ]
      default: 16
  - &tier6_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 12, 500000 ]
        - [ 13, 100000 ]
        - [ 14,  50000 ]
        - [ 15,   5000 ]
      default: 16
  - &us_forest_service
        - United States Forest Service
        - US Forest Service
        - U.S. Forest Service
        - USDA Forest Service
        - United States Department of Agriculture
        - US National Forest Service
        - United State Forest Service
        - U.S. National Forest Service
  - &us_parks_service
        - United States National Park Service
        - National Park Service
        - US National Park Service
        - U.S. National Park Service
        - US National Park service
  - &no_name_okay
        - aerialway: pylon
        - aeroway: [ gate, helipad ]
        - amenity:
          - atm
          - bbq
          - bench
          - bicycle_parking
          - bicycle_rental
          - bicycle_repair_station
          - boat_storage
          - bureau_de_change
          - car_rental
          - car_sharing
          - car_wash
          - charging_station
          - customs
          - fuel
          - harbourmaster
          - hunting_stand
          - karaoke_box
          - life_ring
          - money_transfer
          - motorcycle_parking
          - parking
          - picnic_table
          - post_box
          - ranger_station
          - recycling
          - sanitary_dump_station
          - shelter
          - shower
          - taxi
          - telephone
          - toilets
          - waste_basket
          - waste_disposal
          - water_point
          - watering_place
        - barrier:
          - block
          - bollard
          - border_control
          - cattle_grid
          - chain
          - cycle_barrier
          - gate
          - kissing_gate
          - lift_gate
          - stile
          - swing_gate
          - toll_booth
        - emergency:
          - defibrillator
          - fire_hydrant
          - lifeguard_tower
          - phone
        - harbour: harbour_master
        - highway: [ bus_stop, elevator, ford, mini_roundabout, motorway_junction, platform,
            rest_area, street_lamp, traffic_signals, trailhead ]
        - historic: [landmark, wayside_cross]
        - landuse: quarry
        - leisure: [ dog_park, firepit, fishing, pitch, slipway, swimming_area ]
        - lock: yes
        - man_made: [ adit, communications_tower, crane, mast, mineshaft, obelisk, observatory,
            offshore_platform, petroleum_well, power_wind, telescope, water_tower,
            water_well, watermill, windmill ]
        - military: bunker
        - mooring: true
        - natural: [ cave_entrance, peak, volcano, geyser, hot_spring, rock, saddle,
            stone, spring, tree, waterfall ]
        - power: [ pole, tower, generator ]
        - public_transport: [ platform, stop_area ]
        - railway: [ halt, level_crossing, platform, stop, subway_entrance, tram_stop ]
        - "health_facility:type": [field_hospital, health_centre]
        - "seamark:building:function": harbour_master
        - "seamark:small_craft_facility:category": fuel_station
        - tags->icn_ref: true
        - tags->iwn_ref: true
        - tags->lcn_ref: true
        - tags->lwn_ref: true
        - tags->ncn_ref: true
        - tags->nwn_ref: true
        - tags->rcn_ref: true
        - tags->rwn_ref: true
        - tags->whitewater: [ egress, hazard, put_in, put_in;egress, rapid ]
        - tourism: [ alpine_hut, information, picnic_site, viewpoint, wilderness_hut ]
        - waterway:
          - boat_lift
          - boatyard
          - dam
          - fuel
          - lock
          - sanitary_dump_station
          - waterfall

filters:
  # remove disused things, they're not real POIs any more
  - filter:
      - disused: true
      - not: {disused: "no"}
    min_zoom: null
    output:
      kind: null

  # remove things without a name, unless they're in the list of things for which
  # no name is okay.
  - filter:
      - name: false
      - not:
          any: *no_name_okay
    min_zoom: null
    output:
      kind: null

  # remove abandoned or disused watermills
  - filter:
      any:
        - "abandoned:man_made": watermill
        - all:
          - "watermill:disused": true
          - not: {"watermill:disused": "no"}
    min_zoom: null
    output: {kind: null}

  ############################################################
  # NOT IN ANY TIER
  #
  # These depend on being run before the rule for tourism=attraction,
  # otherwise that rule will trigger first. So these have been moved
  # up here.
  ############################################################
  # if it's a ruin, then the ruin would be the attraction?
  - filter:
      ruins: 'yes'
      man_made: [lighthouse, watermill, windmill]
    min_zoom:
      case:
        - when: { tourism: attraction }
          then: 14
        - else: 17
    output:
      <<: *output_properties
      kind: ruins
      kind_detail: {col: man_made}
  # attractions which aren't ruined
  - filter: {man_made: [lighthouse, watermill, windmill]}
    min_zoom:
      case:
        - when: { tourism: attraction }
          then: 14
        - else: 15
    output:
      <<: *output_properties
      kind: {col: man_made}
  - filter: {man_made: observatory}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: observatory

  ############################################################
  # TIER 2 OVERRIDES
  #
  # These are things which are "more specific" than things in
  # tier 1, so they should match first.
  ############################################################
  - filter:
      boundary: national_park
      operator: *us_forest_service
    min_zoom: { min: [ { max: [ 7, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: forest
      tier: 2
  - filter:
      any:
        leisure: park
        landuse: park
      park:type: state_recreational_area
    min_zoom: { min: [ { max: [ 9, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: park
      tier: 2
  - filter:
      boundary: national_park
      protect_class: '6'
      protection_title: National Forest
    min_zoom: { min: [ { max: [ 7, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: forest
      tier: 2
  - filter:
      boundary: national_park
      protect_class: '6'
      protection_title: National Forest
    min_zoom: { min: [ { max: [ 7, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: forest
      tier: 2
  - filter:
      boundary: national_park
      any:
        - protect_class: '6'
        - designation: area_of_outstanding_natural_beauty
    min_zoom: { min: [ { max: [ 9, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: park
      tier: 2
  - filter:
      any:
        - boundary:type: protected_area
        - boundary: protected_area
      leisure: nature_reserve
      protect_class: ['4', '5']
      not:
        any:
          - operator: *us_forest_service
          - operator: *us_parks_service
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 5 ] }, *tier2_min_zoom ] }, 10 ] }
    output:
      <<: *output_properties
      kind: nature_reserve
      tier: 2

  ############################################################
  # TIER 1
  ############################################################
  - filter:
      historic: battlefield
      not: {operator: *us_forest_service}
    min_zoom: { min: [ { max: [ 10, { sum: [ { col: zoom }, 4 ] }, *tier1_min_zoom ] }, 17 ] }
    output:
      <<: *output_properties
      kind: battlefield
      tier: 1
  - filter:
      boundary: national_park
      any:
        all:
          not: { operator: *us_forest_service }
          protect_class: ['2', '3', '5']
        operator: *us_parks_service
        operator:en: Parks Canada
        designation: national_park
        protection_title: National Park
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 3.5 ] }, *tier1_min_zoom ] }, 10 ] }
    output:
      <<: *output_properties
      kind: national_park
      tier: 1

  ############################################################
  # TIER 2
  ############################################################
  - filter:
      boundary: national_park
      not: { operator: *us_forest_service }
      protect_class: ['2', '3', '5']
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 3.5 ] }, *tier2_min_zoom ] }, 10 ] }
    output:
      <<: *output_properties
      kind: national_park
      tier: 2
  - filter:
      any:
        leisure: park
        landuse: park
        boundary: national_park
    min_zoom: { min: [ { max: [ 9, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: park
      tier: 2

  # forests
  - filter:
      landuse: forest
      protect_class: '6'
    min_zoom: { min: [ { max: [ 7, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: forest
      tier: 2
  - filter:
      landuse: forest
      operator: *us_forest_service
    min_zoom: { min: [ { max: [ 7, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: forest
      tier: 2
  - filter: {landuse: forest}
    min_zoom: { min: [ { max: [ 10, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: forest
      tier: 2

  # nature reserves
  - filter: {leisure: nature_reserve}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 5 ] }, *tier2_min_zoom ] }, 10 ] }
    output:
      <<: *output_properties
      kind: nature_reserve
      tier: 2
  # protected areas
  - filter: {boundary: protected_area}
    min_zoom: { min: [ { max: [ 7, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: protected_area
      tier: 2

  # woods
  - filter:
      landuse: wood
      operator: *us_forest_service
    min_zoom: { min: [ { max: [ 9, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: wood
      tier: 2
  - filter: {landuse: wood}
    min_zoom: { min: [ { max: [ 10, { sum: [ { col: zoom }, 2 ] }, *tier2_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: wood
      tier: 2

  # farm
  - filter: {landuse: farm}
    min_zoom: { max: [ 15, *tier2_min_zoom ] }
    output:
      <<: *output_properties
      kind: farm
      tier: 2
  # urban, rural, residential, farmland - no POIs

  ############################################################
  # TIER 3
  ############################################################
  # aerodrome
  - filter:
      aeroway: [aerodrome, airport, heliport]
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 4.12 ] }, *tier3_min_zoom ] }, 13 ] }
    output:
      <<: *output_properties
      kind: {col: aeroway}
      tier: 3
  # airfield, naval_base
  - filter: {military: [airfield, range, naval_base]}
    min_zoom: { min: [ { max: [ 8, { sum: [ { col: zoom }, 2 ] }, *tier3_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: {col: military}
      tier: 3
  # danger_area
  - filter: {military: danger_area}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 2.55 ] }, *tier3_min_zoom ] }, 15 ] }
    output:
      <<: *output_properties
      kind: danger_area
      tier: 3
  # bunker
  - filter: {military: bunker}
    min_zoom: {case: [{when: {name: true}, then: 16}, {else: 18}]}
    output:
      <<: *output_properties
      kind: bunker
      kind_detail:
        case:
          - when: { bunker_type: [pillbox, munitions, gun_emplacement, hardened_aircraft_shelter, blockhouse, technical, mg_nest, missile_silo] }
            then: { col: bunker_type }
  # military
  - filter: {landuse: military}
    min_zoom: { min: [ { max: [ 8, { sum: [ { col: zoom }, 2 ] }, *tier3_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: military
      tier: 3
  # university
  - filter: {amenity: university}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 2.55 ] }, *tier3_min_zoom ] }, 15 ] }
    output:
      <<: *output_properties
      kind: university
      tier: 3
  # college
  - filter: {amenity: college}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 2.35 ] }, *tier3_min_zoom ] }, 16 ] }
    output:
      <<: *output_properties
      kind: college
      tier: 3

  ############################################################
  # TIER 4
  ############################################################
  # breakwater - no POIs
  # bridge - no POIs
  # cemetery
  - filter: {landuse: cemetery}
    min_zoom: { min: [ { max: [ 12, { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: cemetery
      tier: 4
      kind_detail: { col: religion }
      denomination: { col: denomination }
  # commercial - no POI
  # cutline - no POI
  # dike - no POI
  # generator
  - filter: {power: generator}
    min_zoom: { max: [15, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: generator
      kind_detail:
        case:
          # whitelist common values
          - when:
              'generator:method':
                - anaerobic_digestion
                - barrage
                - combustion
                - fission
                - gasification
                - photovoltaic
                - run-of-the-river
                - stream
                - thermal
                - water-pumped-storage
                - water-storage
                - wind_turbine
            then: {col: 'generator:method'}
          # fix up some common misspellings and alternative tag uses.
          - when: {'generator:method': dam}
            then: water-storage
          - when: {'generator:method': [solar, solar_photovoltaic_panel, photovoltaik, solar_panel]}
            then: photovoltaic
          - when: {'generator:method': wind}
            then: wind_turbine
      tier: 4
  # golf_course
  - filter: {leisure: golf_course}
    min_zoom: { min: [ { max: [ 12, { sum: [ { col: zoom }, 2 ] }, *tier4_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: golf_course
      tier: 4
  # groyne - no POI
  # field_hospital - seems more specific than hospital, so match it first.
  - filter: { 'health_facility:type': field_hospital }
    min_zoom: 15
    output:
      <<: *output_properties
      kind: field_hospital
      <<: *health_facility_type_kind_detail
  # hospital
  - filter: {amenity: hospital}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 3.32 ] }, *tier4_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: hospital
      <<: *health_facility_type_kind_detail
      tier: 4
  # industrial - no POI
  # pier - no POI
  # plant
  - filter: {power: plant}
    min_zoom: { min: [ { max: [ 12, { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: plant
      tier: 4
  # railway - no POI
  # recreation_ground
  - filter: {landuse: recreation_ground}
    min_zoom: { min: [ { max: [ 12, { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: recreation_ground
      tier: 4
  # retail - no POI
  # sports_centre
  - filter: {leisure: sports_centre}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 3.98 ] }, *tier4_min_zoom ] }, 17 ] }
    output:
      <<: *output_properties
      kind:
        case:
          - when:
              sport: ['fitness', 'gym']
            then: 'fitness'
          - else: 'sports_centre'
      sport:
        case:
          - when:
              sport: ['fitness', 'gym']
            then: null
          - else: { col: 'sport' }
      tier: 4
  # stadium
  - filter: {leisure: [horse_riding, stadium]}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 2.3 ] }, *tier4_min_zoom ] }, 15 ] }
    output:
      <<: *output_properties
      kind: {col: leisure}
      tier: 4
  # casino
  - filter: {amenity: casino}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 2.3 ] }, *tier4_min_zoom ] }, 15 ] }
    output:
      <<: *output_properties
      kind: casino
      tier: 4
  # substation
  - filter: {power: substation}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: substation
      tier: 4
  # man_made=tower - no POI
  # wastewater_plant
  - filter: {man_made: wastewater_plant}
    min_zoom: { min: [ { max: [ 12, { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: wastewater_plant
      tier: 4
  # works
  - filter: {man_made: works}
    min_zoom: { min: [ { max: [ 12, { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: works
      tier: 4
  # water_works
  - filter: {man_made: water_works}
    min_zoom: { min: [ { max: [ 12, { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: water_works
      tier: 4
  # wildlife_park - no POI
  - filter:
      zoo: wildlife_park
    min_zoom: 17
    output:
      <<: *output_properties
      kind: wildlife_park
      tier: 4
  # winter_sports
  - filter: {landuse: winter_sports}
    min_zoom: { min: [ { max: [ 10, { sum: [ { col: zoom }, 1 ] }, *tier4_min_zoom ] }, 13 ] }
    output:
      <<: *output_properties
      kind: winter_sports
      tier: 4
  # zoo
  - filter: {tourism: zoo}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 13 ] }
    output:
      <<: *output_properties
      kind: zoo
      tier: 4
  # other random landuse
  - filter: {landuse: [container_terminal, port_terminal, quay, shipyard, wharf]}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 13 ] }
    output:
      <<: *output_properties
      kind: {col: landuse}
      tier: 4
  # seems odd quay is both landuse and man_made...
  - filter: {man_made: quay}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 13 ] }
    output:
      <<: *output_properties
      kind: quay
      tier: 4
  - filter: {waterway: boatyard}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 3 ] }, *tier4_min_zoom ] }, 13 ] }
    output:
      <<: *output_properties
      kind: {col: waterway}
      tier: 4

  ############################################################
  # TIER 5
  ############################################################
  # aquarium
  - filter: {tourism: aquarium}
    min_zoom: { min: [ { max: [ 14, { sum: [ { col: zoom }, 3.09 ] }, *tier5_min_zoom ] }, 17 ] }
    output:
      <<: *output_properties
      kind: aquarium
      tier: 5
  # beach
  - filter: {natural: beach}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 3.2 ] }, *tier5_min_zoom ] }, 14 ] }
    output:
      <<: *output_properties
      kind: beach
      tier: 5
      # whitelist most common surface values for beaches. i'm not quite sure i'd
      # call surface=grass a beach, but it's in the data..?
      kind_detail:
        case:
          - when: {surface: [grass, gravel, pebbles, pebblestone, rocky, sand]}
            then: {col: surface}
  # glacier - no POI
  # maze
  - filter:
      attraction: [animal, water_slide, roller_coaster, summer_toboggan,
        carousel, amusement_ride, maze]
    # no point changing this - it's already masked below any value from
    # tier5_min_zoom
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: attraction}
      tier: 5
  # resort
  - filter: {tourism: resort}
    min_zoom: { min: [ { max: [ 14, { sum: [ { col: zoom }, 5.32 ] }, *tier5_min_zoom ] }, 17 ] }
    output:
      <<: *output_properties
      kind: resort
      tier: 5
  # theme_park (NOTE: also allow and normalise 'Theme Park' to deal with vandalism)
  - filter: {tourism: [theme_park, 'Theme Park']}
    min_zoom: { min: [ { max: [ 13, { sum: [ { col: zoom }, 6.32 ] }, *tier5_min_zoom ] }, 17 ] }
    output:
      <<: *output_properties
      kind: theme_park
      tier: 5
  # winery
  - filter: {tourism: winery}
    min_zoom: { min: [ { max: [ 14, { sum: [ { col: zoom }, 2.85 ] }, *tier5_min_zoom ] }, 17 ] }
    output:
      <<: *output_properties
      kind: winery
      tier: 5

  # obelisk - note that this takes precedence over artwork, monument and memorial!
  - filter: {man_made: obelisk}
    min_zoom:
      lookup:
        key: { call: { func: mz_to_float_meters, args: [ { col: height } ] } }
        op: '>='
        table:
          - [ 14, 20 ]  # z14 if height >= 20m
          - [ 15, 10 ]  # z15 if height >= 10m
        default: 16
    output:
      <<: *output_properties
      kind: obelisk
      tier: 5
      # keep information about whether this was a monument or memorial
      kind_detail:
        case:
          - when: {historic: [monument, memorial]}
            then: {col: historic}

  ############################################################
  # TIER 6
  ############################################################
  # allotments - no POI
  # artwork, hanami
  - filter:
      tourism: [artwork, hanami, trail_riding_station]
    # already clamped below polygon area min
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: tourism}
      tier: 6
  # common - no POI
  # garden
  - filter:
      leisure: garden
      not: { access: [ "private", "no" ] }
    min_zoom: { min: [ { max: [ 12, { col: zoom }, *tier6_min_zoom ] }, 16 ] }
    output:
      <<: *output_properties
      kind: garden
      tier: 6
  # hedge - no POI
  # pedestrian - no POI
  # pitch
  - filter: {leisure: pitch}
    # already clamped below area min
    min_zoom: 16
    output:
      <<: *output_properties
      kind: pitch
      kind_detail: {col: sport}
      tier: 6
  # place_of_worship
  - filter: {amenity: place_of_worship}
    min_zoom: { min: [ { max: [ { sum: [ { mul: [2, {col: zoom}]}, -9.55 ] }, *tier6_min_zoom ] }, 17 ] }
    output:
      <<: *output_properties
      kind: place_of_worship
      tier: 6
  # playground
  - filter: { leisure: playground }
    # already clamped below area limit
    min_zoom: 17
    output:
      <<: *output_properties
      kind: playground
      tier: 6
  # school
  - filter: {amenity: school}
    min_zoom: { min: [ { max: [ { sum: [ { col: zoom }, 2.3 ] }, *tier6_min_zoom ] }, 15 ] }
    output:
      <<: *output_properties
      kind: school
      tier: 6
  # tree_row - no POI
  # wilderness_hut
  - filter: {tourism: wilderness_hut}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: wilderness_hut
      tier: 6

  ############################################################
  # TIER 6 EXTRA - PARKING
  ############################################################
  # parking
  - filter: {amenity: parking}
    min_zoom: 17
    output:
      <<: *output_properties
      kind:
        case:
          - when:
              parking: ['multi-storey', underground, rooftop]
            then: 'parking_garage'
          - else: 'parking'
      tier: 6

  ############################################################
  # NOT IN ANY TIER
  ############################################################
  - filter: {historic: battlefield}
    min_zoom: { clamp: { min: 10, max: 17, value: { sum: [ { col: zoom }, 4 ] } } }
    output:
      <<: *output_properties
      kind: battlefield
  # park w/ US Parks Service operator
  - filter:
      any:
        leisure: park
        landuse: park
    min_zoom: { clamp: { min: 9, max: 14, value: { sum: [ { col: zoom }, 2 ] } } }
    output:
      <<: *output_properties
      kind: park

  - filter:
      natural: [peak, volcano]
    min_zoom:
      lookup:
        key: { call: { func: mz_to_float_meters, args: [ { col: ele } ] } }
        op: '>='
        table:
          - [ 9,  4000 ]
          - [ 10, 3000 ]
          - [ 11, 2000 ]
          - [ 12, 1000 ]
        default: 13
    output:
      <<: *output_properties
      kind: {col: natural}
      elevation: {col: ele}
  - filter:
      railway: station
      any:
        historic: false
        all: {historic: 'no'}
    min_zoom: 10
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: station
      state: {col: tags->state}
  - filter: {natural: spring}
    min_zoom: 14
    output:
      <<: *output_properties
      kind: spring
  - filter: {railway: level_crossing}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: level_crossing
  # filter the waterway / boat fuel before generic amenity=fuel, as they appear
  # to be often tagged with both.
  - filter:
      any:
        - waterway: fuel
        - "seamark:small_craft_facility:category": fuel_station
    min_zoom: { clamp: { min: 14, max: 16, value: { sum: [ { col: zoom }, 2.7 ] } } }
    output:
      <<: *output_properties
      kind: waterway_fuel
  - filter:
      amenity: [bank, cinema, courthouse, embassy, fire_station, fuel, library, police,
        post_office, theatre]
    min_zoom: { clamp: { min: 0, max: 16, value: { sum: [ { col: zoom }, 2.7 ] } } }
    output:
      <<: *output_properties
      kind: {col: amenity}
  - filter:
      any:
        - waterway: fuel
        - "seamark:small_craft_facility:category": 'fuel_station'
    min_zoom: { clamp: { min: 0, max: 16, value: { sum: [ { col: zoom }, 2.7 ] } } }
    output:
      <<: *output_properties
      kind: waterway_fuel
  - filter:
      amenity: [biergarten, pub, bar, nightclub, restaurant, fast_food, cafe]
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 2.5 ] } } }
    output:
      <<: *output_properties
      kind: {col: amenity}
      kind_detail: {col: cuisine}
  - filter:
      shop: [coffee, deli]
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 2.5 ] } } }
    output:
      <<: *output_properties
      kind: {col: shop}
  - filter:
      amenity: [pharmacy, veterinary]
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.3 ] } } }
    output:
      <<: *output_properties
      kind: {col: amenity}
      <<: *health_facility_type_kind_detail
  - filter:
      craft: [brewery, carpenter, confectionery, dressmaker, electrician, gardener,
        handicraft, hvac, metal_construction, painter, photographer, photographic_laboratory,
        plumber, pottery, sawmill, shoemaker, stonemason, tailor, winery]
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.3 ] } } }
    output:
      <<: *output_properties
      kind: {col: craft}
  - filter:
      shop: [charity, chemist, cosmetics, fishmonger, furniture, golf, pet, shoes, variety_store]
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.3 ] } } }
    output:
      <<: *output_properties
      kind: {col: shop}
  - filter: {shop: [camera, copyshop, photo, tyres]}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: {col: shop}
  - filter: {amenity: nursing_home}
    min_zoom: { clamp: { min: 0, max: 16, value: { sum: [ { col: zoom }, 1.25 ] } } }
    output:
      <<: *output_properties
      kind: nursing_home
      <<: *health_facility_type_kind_detail
  - filter: {shop: music}
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 1.27 ] } } }
    output:
      <<: *output_properties
      kind: music
  - filter: {amenity: community_centre}
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.98 ] } } }
    output:
      <<: *output_properties
      kind: community_centre
  - filter: {shop: sports}
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 1.53 ] } } }
    output:
      <<: *output_properties
      kind: sports
  - filter: {shop: fishing}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: fishing
  - filter: {shop: hunting}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: hunting
  - filter: {shop: outdoor}
    min_zoom: { clamp: { min: 15, max: 16, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: outdoor
  - filter: {amenity: dive_centre}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: dive_centre
  - filter: {shop: scuba_diving}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: scuba_diving
  - filter: {shop: [atv, motorcycle, snowmobile]}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: shop}
  - filter: {shop: mall}
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 2.77 ] } } }
    output:
      <<: *output_properties
      kind: mall
  - filter: {amenity: prison}
    min_zoom: { clamp: { min: 0, max: 15, value: { sum: [ { col: zoom }, 2.55 ] } } }
    output:
      <<: *output_properties
      kind: prison
  - filter: {tourism: museum}
    min_zoom: { clamp: { min: 0, max: 16, value: { sum: [ { col: zoom }, 1.43 ] } } }
    output:
      <<: *output_properties
      kind: museum
  - filter: {historic: landmark}
    min_zoom: { clamp: { min: 0, max: 15, value: { sum: [ { col: zoom }, 1.76 ] } } }
    output:
      <<: *output_properties
      kind: landmark
  - filter: {leisure: marina}
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.45 ] } } }
    output:
      <<: *output_properties
      kind: marina
      sanitary_dump_station:
        case:
          - when: {sanitary_dump_station: ['yes', 'customers', 'public']}
            then: {col: sanitary_dump_station}
  - filter: {amenity: townhall}
    min_zoom: { clamp: { min: 0, max: 16, value: { sum: [ { col: zoom }, 1.85 ] } } }
    output:
      <<: *output_properties
      kind: townhall
  - filter:
      shop: [laundry, dry_cleaning, toys, ice_cream, wine, alcohol]
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 4.9 ] } } }
    output:
      <<: *output_properties
      kind: {col: shop}
  - filter: {amenity: ice_cream}
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 4.9 ] } } }
    output:
      <<: *output_properties
      kind: ice_cream
  - filter:
      any:
        amenity: ferry_terminal
        landuse: ferry_terminal
    min_zoom: { clamp: { min: 0, max: 15, value: { sum: [ { col: zoom }, 3.2 ] } } }
    output:
      <<: *output_properties
      kind: ferry_terminal
  - filter: {shop: electronics}
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.3 ] } } }
    output:
      <<: *output_properties
      kind: electronics
  - filter:
      shop: [department_store, supermarket, doityourself, hardware, trade, garden_centre]
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.29 ] } } }
    output:
      <<: *output_properties
      kind: {col: shop}
  - filter:
      amenity: [marketplace]
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.29 ] } } }
    output:
      <<: *output_properties
      kind: {col: amenity}

  - filter:
      any:
        tags->rental: ski
        amenity: ski_rental
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 1.27 ] } } }
    output:
      <<: *output_properties
      kind: ski_rental

  - filter: {shop: ski}
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 1.27 ] } } }
    output:
      <<: *output_properties
      kind: ski
  - filter: {amenity: ski_school}
    min_zoom: { clamp: { min: 0, max: 15, value: { sum: [ { col: zoom }, 2.3 ] } } }
    output:
      <<: *output_properties
      kind: ski_school
  - filter: {man_made: snow_cannon}
    min_zoom: { clamp: { min: 0, max: 18, value: { sum: [ { col: zoom }, 4.9 ] } } }
    output:
      <<: *output_properties
      kind: snow_cannon
  - filter:
      any:
        leisure: [fitness_centre, gym]
        amenity: gym
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.98 ] } } }
    output:
      <<: *output_properties
      kind: fitness
  - filter: {leisure: fitness_station}
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 3.98 ] } } }
    output:
      <<: *output_properties
      kind: fitness_station
  - filter: {leisure: [beach_resort, adult_gaming_centre]}
    min_zoom: { clamp: { min: 14, max: 16, value: { sum: [ { col: zoom }, 0.5 ] } } }
    output:
      <<: *output_properties
      kind: {col: leisure}
  - filter:
      tourism: [hotel, motel]
    min_zoom: { clamp: { min: 0, max: 17, value: { sum: [ { col: zoom }, 4.3 ] } } }
    output:
      <<: *output_properties
      kind: {col: tourism}
  - filter: {highway: motorway_junction}
    min_zoom: 12
    output:
      <<: *output_properties
      kind: motorway_junction
  - filter: {historic: monument}
    min_zoom: { clamp: { min: 15, max: 17, value: { sum: [ { col: zoom }, 2.24 ] } } }
    output:
      <<: *output_properties
      kind: monument
  - filter:
      tags->zoo: [enclosure, petting_zoo, aviary]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: tags->zoo}
  - filter:
      any:
        - {waterway: waterfall}
        - {natural: waterfall}
    min_zoom:
      lookup:
        key: { call: { func: mz_to_float_meters, args: [ { col: height } ] } }
        op: '>='
        table:
          - [ 12, 300 ]
          - [ 13,  50 ]
          - [ 14,  10 ]
          - [ 15,   1 ]
        default: { clamp: { min: 12, max: 14, value: { sum: [ { col: zoom }, 1.066 ] } } }
    output:
      <<: *output_properties
      kind: waterfall
      height: {col: height}
  - filter: {natural: geyser}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: geyser
  - filter: {natural: hot_spring}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: hot_spring
  - filter: {historic: fort}
    min_zoom: { clamp: { min: 13, max: 16, value: { sum: [ { col: zoom }, 2.5 ] } } }
    output:
      <<: *output_properties
      kind: fort
  - filter: {tourism: gallery}
    min_zoom: { clamp: { min: 15, max: 17, value: { sum: [ { col: zoom }, 1.43 ] } } }
    output:
      <<: *output_properties
      kind: gallery
  - filter: { 'health_facility:type': health_centre }
    min_zoom: 15
    output:
      <<: *output_properties
      kind: health_centre
      <<: *health_facility_type_kind_detail
  - filter: { 'health_facility:type': dispensary }
    min_zoom: 17
    output:
      <<: *output_properties
      kind: dispensary
      <<: *health_facility_type_kind_detail
  - filter:
      social_facility: ambulatory_care
    min_zoom: 17
    output:
      <<: *output_properties
      kind: ambulatory_care
      <<: *health_facility_type_kind_detail
  - filter:
      amenity: [clinic, dentist, doctors, social_facility]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: amenity}
      <<: *health_facility_type_kind_detail
  - filter: {healthcare: [bank, blood, chiropractor, donation, hospice, midwife, midwife_occupational, optometrist_paediatrics, physiotherapist_physiotherapy, podiatrist_psychotherapist, rehabilitation, speech, therapist, therapist]}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: tags->healthcare}
      <<: *health_facility_type_kind_detail
  - filter: {healthcare: alternative}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: healthcare_alternative
      <<: *health_facility_type_kind_detail
  - filter: {healthcare: centre}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: healthcare_centre
      <<: *health_facility_type_kind_detail
  - filter: {healthcare: laboratory}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: healthcare_laboratory
      <<: *health_facility_type_kind_detail
  - filter: {healthcare: [blood_donation, blood_bank]}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: blood_bank
  - filter:
      amenity: [baby_hatch, kindergarten, childcare]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: amenity}

  - filter:
      any:
        amenity: boat_rental
        shop: boat_rental
        rental: boat
        all: {shop: boat, rental: 'yes'}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: boat_rental
  - filter: {amenity: harbourmaster}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: harbourmaster

  - filter: {emergency: [defibrillator, fire_hydrant, phone]}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: {col: emergency}
  - filter: {amenity: toilets}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: toilets
      kind_detail:
        # normalize disposal and whitelist
        case:
          - when: {'toilets:disposal': [pit_latrine, flush, chemical, pour_flush, bucket]}
            then: {col: 'toilets:disposal'}
          - when: {'toilets:disposal': pitlatrine}
            then: pit_latrine
  - filter: {barrier: [chain, gate, kissing_gate, lift_gate, stile, swing_gate]}
    min_zoom: { call: { func: mz_get_min_zoom_highway_level_gate, args: [ { col: fid }, { col: meta.ways } ] } }
    output:
      <<: *output_properties
      kind: gate
      kind_detail: {col: barrier}
  - filter:
      shop: funeral_directors
    min_zoom: 16
    output:
      <<: *output_properties
      kind: funeral_directors
  # put border_control ahead of customs. many customs checks will be border controls,
  # but the reverse isn't necessarily true.
  - filter:
      barrier: border_control
    min_zoom: { clamp: { min: 14, max: 16, value: { sum: [ { col: zoom }, 2.7 ] } } }
    output:
      <<: *output_properties
      kind: border_control
  - filter:
      amenity: customs
    min_zoom: { clamp: { min: 14, max: 16, value: { sum: [ { col: zoom }, 2.7 ] } } }
    output:
      <<: *output_properties
      kind: customs
  - filter: {barrier: toll_booth}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: toll_booth
  - filter: {highway: mini_roundabout}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: mini_roundabout
  - filter: {lock: 'yes'}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: lock
  - filter: {man_made: power_wind}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: power_wind
  - filter: {natural: cave_entrance}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: cave_entrance
  - filter: {waterway: lock}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: lock
  - filter: {aerialway: station}
    min_zoom: 13
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: station
      state: {col: tags->state}
  - filter:
      railway: [halt, stop, tram_stop]
# to work around overwriting when using the same key twice
      any:
        historic: false
        all: {historic: 'no'}
    min_zoom: 13
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: {col: railway}
  - filter: {railway: platform}
    min_zoom: 15
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: platform
  - filter: {highway: platform}
    min_zoom: 17
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: bus_stop
  - filter: {public_transport: platform, tags->rail: 'yes'}
    min_zoom: 15
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: platform
  - filter: {public_transport: platform, tags->light_rail: 'yes'}
    min_zoom: 15
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: platform
  - filter: {public_transport: platform, tags->bus: 'yes'}
    min_zoom: 17
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: bus_stop
  - filter: {public_transport: platform}
    min_zoom: 15
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: platform
  - filter: {public_transport: stop_area}
    min_zoom: 15
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: stop_area
  - filter: {tags->site: stop_area}
    min_zoom: 15
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: stop_area
  - filter: {tourism: alpine_hut}
    min_zoom: 13
    output:
      <<: *output_properties
      kind: alpine_hut
  - filter: {aeroway: gate}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: aeroway_gate
  - filter: {aeroway: helipad}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: helipad
  - filter:
      amenity: arts_centre
    min_zoom: 15
    output:
      <<: *output_properties
      kind: {col: amenity}
  - filter:
      amenity: [bus_station, car_rental, car_sharing, recycling, shelter]
    min_zoom: 16
    output:
      <<: *output_properties
      kind: {col: amenity}
  - filter:
      barrier: [block, bollard, cattle_grid]
    min_zoom: 16
    output:
      <<: *output_properties
      kind: {col: barrier}
  - filter: {highway: ford}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: ford
  - filter: {historic: archaeological_site}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: archaeological_site
  - filter: {man_made: communications_tower}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: communications_tower
  - filter: {man_made: telescope}
    min_zoom: { clamp: { min: 15, max: 16, value: { sum: [ { col: zoom }, 0.1 ] } } }
    output:
      <<: *output_properties
      kind: telescope
  - filter: {man_made: offshore_platform}
    min_zoom: 13
    output:
      <<: *output_properties
      kind: offshore_platform
  - filter: {man_made: water_tower}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: water_tower
  - filter: {natural: tree}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: tree
  - filter: {amenity: ranger_station}
    min_zoom: 14
    output:
      <<: *output_properties
      kind: ranger_station
  - filter:
      tags->icn_ref: true
    min_zoom: 16
    output:
      <<: *output_properties
      kind: bicycle_junction
      ref: {col: tags->icn_ref}
      bicycle_network: icn
  - filter:
      tags->ncn_ref: true
    min_zoom: 16
    output:
      <<: *output_properties
      kind: bicycle_junction
      ref: {col: tags->ncn_ref}
      bicycle_network: ncn
  - filter:
      tags->rcn_ref: true
    min_zoom: 16
    output:
      <<: *output_properties
      kind: bicycle_junction
      ref: {col: tags->rcn_ref}
      bicycle_network: rcn
  - filter:
      tags->lcn_ref: true
    min_zoom: 16
    output:
      <<: *output_properties
      kind: bicycle_junction
      ref: {col: tags->lcn_ref}
      bicycle_network: lcn
  - filter:
      tags->iwn_ref: true
    min_zoom: 16
    output:
      <<: *output_properties
      kind: walking_junction
      ref: {col: tags->iwn_ref}
      walking_network: iwn
  - filter:
      tags->nwn_ref: true
    min_zoom: 16
    output:
      <<: *output_properties
      kind: walking_junction
      ref: {col: tags->nwn_ref}
      walking_network: nwn
  - filter:
      tags->rwn_ref: true
    min_zoom: 16
    output:
      <<: *output_properties
      kind: walking_junction
      ref: {col: tags->rwn_ref}
      walking_network: rwn
  - filter:
      tags->lwn_ref: true
    min_zoom: 16
    output:
      <<: *output_properties
      kind: walking_junction
      ref: {col: tags->lwn_ref}
      walking_network: lwn
  - filter: {tourism: camp_site}
    min_zoom: { clamp: { min: 13, max: 16, value: { sum: [ { col: zoom }, 4.9 ] } } }
    output:
      <<: *output_properties
      kind: camp_site
      sanitary_dump_station:
        case:
          - when: {sanitary_dump_station: ['yes', 'customers', 'public']}
            then: {col: sanitary_dump_station}
  - filter:
      tourism: viewpoint
    min_zoom: 15
    output:
      <<: *output_properties
      kind: viewpoint
  - filter:
      tourism: information
    min_zoom: 16
    output:
      <<: *output_properties
      kind: information
  - filter:
      amenity: [atm, bureau_de_change, bus_stop, drinking_water, emergency_phone,
        karaoke, karaoke_box, money_transfer, post_box, telephone]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: amenity}
  - filter:
      highway: [bus_stop, street_lamp, traffic_signals]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: highway}
  # memorial plaques more specific than plain memorials
  - filter:
      any:
        - {historic: memorial, memorial: plaque}
        - historic: memorial_plaque
    min_zoom: 16
    output:
      <<: *output_properties
      kind: plaque
  # plain memorial
  - filter: {historic: memorial}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: memorial
  # slipway with mooring info
  - filter:
      leisure: slipway
      mooring: ['yes', 'no']
    min_zoom: 17
    output:
      <<: *output_properties
      kind: slipway
      mooring: {col: mooring}
  # plain slipway without mooring info
  - filter: { leisure: slipway }
    min_zoom: 17
    output:
      <<: *output_properties
      kind: slipway
  - filter: {man_made: mast}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: mast
  - filter: {emergency: defibrillator}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: defibrillator
  - filter:
      office: [accountant, administrative, advertising_agency, architect, association,
        company, consulting, educational_institution, employment_agency, estate_agent,
        financial, foundation, government, insurance, it, lawyer, newspaper, ngo, notary,
        physician, political_party, religion, research, tax_advisor, telecommunication,
        therapist, travel_agent]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: office}
  - filter: {shop: bicycle}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: bicycle
  - filter:
      amenity: bicycle_rental
      operator: false
    min_zoom: 16
    output:
      <<: *output_properties
      kind: bicycle_rental
  - filter:
      amenity: bicycle_rental
      operator: true
    min_zoom: 17
    output:
      <<: *output_properties
      kind: bicycle_rental_station
      network:  {col: tags->network}
      operator: {col: operator}
      capacity: {col: tags->capacity}
      ref: {col: ref}
  - filter: {amenity: [bicycle_parking, motorcycle_parking] }
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: amenity}
      access: {col: access}
      operator: {col: operator}
      capacity: {col: tags->capacity}
      covered:
        case:
          - when:
              covered: 'yes'
            then: true
          - when:
              covered: 'no'
            then: false
      fee:
        case:
          - when:
              fee: true
              not:
                fee: ['no', 'Free', 'free', '0', 'No', 'none']
            then: true
        # TODO tests expect this to be false and not omitted, is that what we want?
          - else: false
      cyclestreets_id: {col: tags->cyclestreets_id}
      maxstay: {col: tags->maxstay}
      surveillance:
        case:
          - when:
              surveillance: true
              not:
                surveillance: ['no', 'none']
            then: true
  - filter:
      amenity: [charging_station]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: amenity}
      bicycle:
        case:
          - when:
              bicycle: 'yes'
            then: true
          - when:
              bicycle: 'no'
            then: false
      car:
        case:
          - when:
              car: 'yes'
            then: true
          - when:
              car: 'no'
            then: false
      truck:
        case:
          - when:
              truck: 'yes'
            then: true
          - when:
              truck: 'no'
            then: false
      scooter:
        case:
          - when:
              scooter: 'yes'
            then: true
          - when:
              scooter: 'no'
            then: false
  - filter: {barrier: cycle_barrier}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: cycle_barrier
  - filter:
      shop:
        - art
        - bakery
        - beauty
        - bookmaker
        - books
        - butcher
        - car
        - car_parts
        - car_repair
        - clothes
        - computer
        - convenience
        - fashion
        - florist
        - garden_centre
        - gift
        - golf
        - greengrocer
        - grocery
        - hairdresser
        - hifi
        - jewelry
        - lottery
        - mobile_phone
        - newsagent
        - optician
        - perfumery
        - ship_chandler
        - stationery
        - tobacco
        - travel_agency
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: shop}
  - filter: # These are lower priority than the shops above
      amenity: [car_wash, hunting_stand]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: amenity}
  - filter:
      tourism: [bed_and_breakfast, chalet, guest_house, hostel]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: tourism}
  - filter: {railway: subway_entrance}
    min_zoom: 17
    output:
      <<: *output_properties
      <<: *transit_properties
      kind: subway_entrance
  - filter:
      amenity: [bench, waste_basket]
    min_zoom: 18
    output:
      <<: *output_properties
      kind: {col: amenity}
  - filter:
      man_made: [beacon, cross, mineshaft]
    min_zoom: 15
    output:
      <<: *output_properties
      kind: {col: man_made}
  - filter: {man_made: adit}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: adit

  - filter: {man_made: water_well}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: water_well
      kind_detail:
        case:
          - when: {drinking_water: 'yes', pump: 'powered'}
            then: drinkable_powered
          - when: {drinking_water: 'yes', pump: 'manual'}
            then: drinkable_manual
          - when: {drinking_water: 'yes', pump: 'no'}
            then: drinkable_no_pump
          - when: {drinking_water: 'yes'}
            then: drinkable
          - when: {drinking_water: 'no', pump: 'powered'}
            then: not_drinkable_powered
          - when: {drinking_water: 'no', pump: 'manual'}
            then: not_drinkable_manual
          - when: {drinking_water: 'no', pump: 'no'}
            then: not_drinkable_no_pump
          - when: {drinking_water: 'no'}
            then: not_drinkable
  - filter: {natural: saddle}
    min_zoom: 14
    output:
      <<: *output_properties
      kind: saddle
  - filter:
      natural: [dune, sinkhole]
    min_zoom: 15
    output:
      <<: *output_properties
      kind: {col: natural}
  - filter:
      natural: [rock, stone]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: natural}
  - filter: {highway: trailhead}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: trailhead
  - filter: {tags->whitewater: put_in;egress}
    min_zoom: 14
    output:
      <<: *output_properties
      kind: put_in_egress
  - filter:
      tags->whitewater: [put_in, egress]
    min_zoom: 14
    output:
      <<: *output_properties
      kind: {col: tags->whitewater}
  - filter:
      tags->whitewater: [hazard, rapid]
    min_zoom: 15
    output:
      <<: *output_properties
      kind: {col: tags->whitewater}
  - filter: {shop: gas}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: gas_canister
  - filter: {aerialway: pylon}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: pylon
  - filter: {amenity: bbq}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: bbq
  - filter: {amenity: studio}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: studio
      kind_detail:
        # whitelist common studio values as kind_detail.
        case:
          - when: {studio: [audio, cinema, photography, radio, television, video]}
            then: {col: studio}
  - filter: {amenity: bicycle_repair_station}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: bicycle_repair_station
  - filter: {amenity: life_ring}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: life_ring
  - filter: {amenity: picnic_table}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: picnic_table
  - filter: {amenity: love_hotel}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: love_hotel
  - filter: {amenity: [shower,taxi]}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: {col: amenity}
  - filter: {amenity: waste_disposal}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: waste_disposal
  - filter: {amenity: watering_place}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: watering_place
  - filter: {amenity: water_point}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: water_point
  - filter: {emergency: lifeguard_tower}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: lifeguard_tower
  - filter: {power: pole}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: power_pole
  - filter: {power: tower}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: power_tower
  - filter: {man_made: petroleum_well}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: petroleum_well
  # a boat lift is a more specific type of object than a crane, although it may
  # or may not be an instance of a crane.
  - filter: {waterway: boat_lift}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: boat_lift
  - filter: {man_made: crane}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: crane
      kind_detail: {col: "crane:type"}
  - filter: {leisure: water_park}
    min_zoom: { clamp: { min: 13, max: 15, value: { sum: [ { col: zoom }, 2.34 ] } } }
    output:
      <<: *output_properties
      kind: water_park
  - filter: {leisure: summer_camp}
    min_zoom: { clamp: { min: 14, max: 15, value: { sum: [ { col: zoom }, 1.32 ] } } }
    output:
      <<: *output_properties
      kind: summer_camp
  - filter: {amenity: boat_storage}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: boat_storage
  - filter: {waterway: dam}
    min_zoom: { clamp: { min: 12, max: 14, value: { sum: [ { col: zoom }, 1 ] } } }
    output:
      <<: *output_properties
      kind: dam
  - filter: {leisure: dog_park}
    min_zoom: { clamp: { min: 16, max: 17, value: { sum: [ { col: zoom }, 1 ] } } }
    output:
      <<: *output_properties
      kind: dog_park
  - filter: {leisure: track}
    min_zoom: { clamp: { min: 16, max: 17, value: { sum: [ { col: zoom }, 1 ] } } }
    output:
      <<: *output_properties
      kind: recreation_track
  - filter: {leisure: fishing}
    min_zoom: { clamp: { min: 16, max: 17, value: { sum: [ { col: zoom }, 1.76 ] } } }
    output:
      <<: *output_properties
      kind: fishing_area
  - filter: {leisure: swimming_area}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: swimming_area
  - filter: {leisure: firepit}
    min_zoom: 18
    output:
      <<: *output_properties
      kind: firepit
  - filter: {leisure: miniature_golf}
    min_zoom: { clamp: { min: 16, max: 17, value: { sum: [ { col: zoom }, 1 ] } } }
    output:
      <<: *output_properties
      kind: miniature_golf
  - filter: {tourism: caravan_site}
    min_zoom: { clamp: { min: 14, max: 15, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: caravan_site
      sanitary_dump_station:
        case:
          - when: {sanitary_dump_station: ['yes', 'customers', 'public']}
            then: {col: sanitary_dump_station}
  - filter: {tourism: picnic_site}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: picnic_site
  - filter: {highway: services}
    min_zoom: 11
    output:
      <<: *output_properties
      kind: service_area
  - filter: {highway: rest_area}
    min_zoom: 11
    output:
      <<: *output_properties
      kind: rest_area
  - filter: {amenity: grave_yard}
    min_zoom: { clamp: { min: 13, max: 17, value: { sum: [ { col: zoom }, 3 ] } } }
    output:
      <<: *output_properties
      kind: grave_yard
      kind_detail: { col: religion }
      denomination: { col: denomination }
  - filter: {landuse: quarry}
    min_zoom: { clamp: { min: 12, max: 14, value: { sum: [ { col: zoom }, 3 ] } } }
    output:
      <<: *output_properties
      kind: quarry
  - filter: {industrial: slaughterhouse}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: slaughterhouse
  - filter:
      leisure:
        - adult_gaming_centre
        # fairly common misspelling
        - adult_gaming_center
    min_zoom: 17
    output:
      <<: *output_properties
      kind: adult_gaming_centre
  # this is often used on shop=bookmaker, shop=lottery or
  # leisure=adult_gaming_centre, but seems more generic than any of those.
  - filter: {amenity: gambling}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: {col: amenity}
  - filter:
      waterway: boatyard
    min_zoom: 16
    output:
      <<: *output_properties
      kind: boatyard
  - filter:
      any:
        - amenity: harbourmaster
        - harbour: harbour_master
        - "seamark:building:function": harbour_master
    min_zoom: 16
    output:
      <<: *output_properties
      kind: harbourmaster
  # moorings with more detail
  - filter:
      mooring: [
        commercial, cruise, customers, declaration, ferry, guest,
        pile, waiting, yacht, yachts]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: mooring
      kind_detail: {col: mooring}
  # moorings with access restrictions
  - filter:
      mooring: [ private, public ]
    min_zoom: 17
    output:
      <<: *output_properties
      kind: mooring
      access: {col: mooring}
  # plain moorings, without detail
  - filter: {mooring: true}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: mooring

  - filter:
      any:
        - amenity: sanitary_dump_station
        - waterway: sanitary_dump_station
    min_zoom: 17
    output:
      <<: *output_properties
      kind: sanitary_dump_station

  - filter: {highway: elevator}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: elevator

  - filter: { historic: wayside_cross }
    min_zoom: 16
    output:
      <<: *output_properties
      kind: wayside_cross

  ############################################################
  # TIER 6 EXTRA - ATTRACTION
  #
  # Because this is so generic, we want other tags to match
  # before this one.
  ############################################################
  - filter:
      tourism: attraction
    # already clamped below polygon area min
    min_zoom: 17
    output:
      <<: *output_properties
      kind: attraction
      tier: 6

  # if a more specific shop isn't found, then default to generic shop kind
  - filter:
      shop: true
    min_zoom: 17
    output:
      <<: *output_properties
      kind: shop
  # if a more specific craft isn't found, then default to generic craft kind
  - filter:
      craft: true
    min_zoom: 17
    output:
      <<: *output_properties
      kind: craft
  # if a more specific off isn't found, then default to a generic office.
  - filter:
      office: true
    min_zoom: 17
    output:
      <<: *output_properties
      kind: office
  # if a more specific industrial isn't found, then default to generic industrial kind
  - filter:
      industrial: true
    min_zoom: 17
    output:
      <<: *output_properties
      kind: industrial
